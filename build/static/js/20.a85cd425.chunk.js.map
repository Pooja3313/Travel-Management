{"version":3,"file":"static/js/20.a85cd425.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/utils/time-conversion.mjs","../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","../node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs","../node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","../node_modules/framer-motion/dist/es/easing/ease.mjs","../node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","../node_modules/framer-motion/dist/es/easing/circ.mjs","../node_modules/framer-motion/dist/es/easing/back.mjs","../node_modules/framer-motion/dist/es/easing/utils/map.mjs","../node_modules/framer-motion/dist/es/easing/anticipate.mjs","../node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","../node_modules/framer-motion/dist/es/utils/offsets/time.mjs","../node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","../node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","../node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","../node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","../node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","../node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","../node_modules/framer-motion/dist/es/animation/animators/instant.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../node_modules/framer-motion/dist/es/projection/node/state.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/debug/record.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../node_modules/framer-motion/dist/es/gestures/hover.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/gestures/press.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/gestures/focus.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/store.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/render/dom/features-max.mjs","../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs"],"sourcesContent":["class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { frame, cancelFrame } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { frame, cancelFrame } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","import { cancelFrame, frame } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\n\nexport { isNone };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, isTransitionDefined };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(instantAnimationState.current\n                ? { ...options, delay: 0 }\n                : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isNone } from './is-none.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [...target];\n    }\n    else {\n        keyframes = [null, target];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < keyframes.length; i++) {\n        /**\n         * Fill null/wildcard keyframes\n         */\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" &&\n            keyframes[i] !== \"none\" &&\n            keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable &&\n        noneKeyframeIndexes.length &&\n        animatableTemplateValue) {\n        for (let i = 0; i < noneKeyframeIndexes.length; i++) {\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\nexport { getKeyframes };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import { frame } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelFrame, steps, frame } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return false;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n    return true;\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/index.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/index.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { frame, cancelFrame } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.12.21\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.21 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            const newValues = checkTargetForNewValues(this, target, origin);\n            // If new values have been added, for instance named color values, transform these\n            if (transformValues && newValues) {\n                origin = transformValues(origin);\n            }\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n"],"names":["Feature","constructor","node","this","isMounted","update","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","arguments","length","undefined","point","x","y","addPointerInfo","handler","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","addPointerEvent","distance","a","b","Math","abs","PanSession","handlers","transformPagePoint","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","sqrt","distance2D","offset","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","frame","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","window","updateHandlers","cancelFrame","subtractPoint","_ref","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","createLock","name","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","calcLength","axis","max","min","isNear","value","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createDelta","createBox","eachAxis","callback","convertBoundingBoxToBox","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","z","rotate","rotateX","rotateY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","Number","isInteger","translateAxis","transformAxis","transforms","_ref2","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transform","measureViewportBox","instance","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","instantAnimationState","isBezierDefinition","easing","Array","isArray","isWaapiSupportedEasing","Boolean","supportedWaapiEasing","every","cubicBezierAsString","c","d","concat","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","mapEasingToNativeEasing","map","featureTests","waapi","Object","hasOwnProperty","call","Element","prototype","results","supports","calcBezier","t","a1","a2","subdivisionPrecision","subdivisionMaxIterations","cubicBezier","mX1","mY1","mX2","mY2","noop","getTForX","aX","lowerBound","upperBound","currentX","currentT","binarySubdivide","isEasingArray","mirrorEasing","p","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","definition","invariant","x1","y1","x2","y2","keyframes","duration","keyframeValues","times","easingFunctions","state","done","absoluteTimes","o","convertOffsetToTimes","defaultOffset","mapTimeToKeyframe","interpolate","splice","calculatedDuration","next","velocitySampleDuration","calcGeneratorVelocity","resolveValue","current","prevT","velocityPerSecond","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","envelope","derivative","bounce","mass","warning","dampingRatio","clamp","undampedFreq","exponentialDecay","calcAngularFreq","exp","e","f","g","initialGuess","result","rootIterations","approximateRoot","stiffness","damping","durationKeys","physicsKeys","isSpringType","keys","some","spring","restDelta","restSpeed","isResolvedFromDuration","springOptions","derived","getSpringOptions","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","resolveSpring","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","nearestBoundary","v","amplitude","ideal","calcDelta","calcLatest","applyFriction","latest","timeReachedBoundary","spring$1","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","start","stop","now","isProcessing","performance","maxGeneratorDuration","calcGeneratorDuration","generator","types","decay","tween","animateValue","resolveFinishedPromise","currentFinishedPromise","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","speed","hasStopped","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","mirroredGenerator","reverse","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","round","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","isAnimationFinished","finish","stopAnimationDriver","cancel","play","controls","then","reject","newTime","newSpeed","pause","complete","sample","acceleratedValues","Set","createAcceleratedAnimation","valueName","has","requiresPregeneratedKeyframes","sampleAnimation","pregeneratedKeyframes","animation","element","keyframeOptions","animate","fill","iterations","direction","animateStyle","owner","cancelAnimation","safeCancel","onfinish","set","getFinalKeyframe","playbackRate","setWithVelocity","underDampedSpring","keyframesTransition","getDefaultTransition","valueKey","transformProps","startsWith","isAnimatable","complex","test","maxDefaults","applyDefaultFilter","slice","split","number","match","floatRegex","unit","replace","defaultValue","functionRegex","filter","getAnimatableNone","functions","join","defaultValueTypes","numberValueTypes","color","backgroundColor","outlineColor","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isZeroValueString","isNone","getValueTransition","transition","animateMotionValue","valueTransition","isTargetAnimatable","defaultOrigin","from","get","animatableTemplateValue","noneKeyframeIndexes","getKeyframes","originKeyframe","targetKeyframe","isOriginAnimatable","when","_delay","delayChildren","staggerChildren","staggerDirection","isTransitionDefined","setValue","createInstantAnimation","HTMLElement","getProps","acceleratedAnimation","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","layoutBox","parseFloat","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","getCurrentDirection","updateAxis","render","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","all","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","calcOrigin","transformTemplate","style","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","correctBoxShadow","treeScale","projectionDelta","original","shadow","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","React__default","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","context","useContext","PresenceContext","id","useId","useEffect","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","addUniqueItem","scheduleRender","removeItem","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","forEach","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","transformAxes","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","data","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","SubscriptionManager","notifyListeners","subscriptionManager","_len","args","_key","notify","hasListeners","mount","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","read","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","shouldReduceMotion","unmount","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","steps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","_a","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","motionValue$1","isMotionValue","animateSingleValue","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","transformOrigin","scaleCorrectors","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","DocumentProjectionNode","ref","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","super","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","dragControls","subscribe","ProjectionNode","shallowCompare","prev","prevLength","resolveVariant","custom","resolveVariantFromProps","getCurrent","optimizedAppearDataAttribute","camelToDash","isWillChangeMotionValue","testValueType","dimensionValueTypes","degrees","vw","vh","findDimensionValueType","find","valueTypes","findValueType","setMotionValue","hasValue","addValue","setTarget","resolved","transitionEnd","makeTargetAnimatable","resolveFinalValueInKeyframes","getOriginFromTransition","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","transitionOverride","willChange","animations","animationTypeState","getState","valueTarget","HandoffAppearAnimations","hasAnimated","appearId","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","size","forwardDelay","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","animateChildren","first","last","sortNodePosition","reversePriorityOrder","variantPriorityOrder","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createTypeState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","isKeyframesTarget","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","prevAnimate","prevIsPresent","prevPresenceContext","exitAnimation","addHoverEvent","callbackName","handleEvent","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","gestureAnimations","inView","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","prevViewport","hasViewportOptionChanged","tap","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endPointerPress","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","handleBlur","onTapStart","removePointerListener","removeFocusListener","focus","onFocus","isFocusVisible","matches","onBlur","hover","splitCSSVariableRegex","maxDepth","getVariableValue","token","fallback","exec","parseCSSVariable","getPropertyValue","trim","isCSSVariableToken","positionalKeys","isPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformPropOrder","positionalValues","width","_ref3","paddingLeft","paddingRight","height","_ref4","_ref5","paddingTop","paddingBottom","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","translateX","translateY","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","fromType","toType","numKeyframes","fromIndex","removedTransforms","removeNonTranslationalTransform","jump","scrollY","indexOf","pageYOffset","convertedTarget","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","_ref12","isBrowser","scrollTo","unitConversion","hasPositionalKey","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","featureDefinitions","numFeatures","propEventHandlers","numVariantProps","variantProps","VisualElement","reducedMotionConfig","visualState","isVariantNode","isControllingVariants","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderState","baseTarget","initialValues","initialMotionValues","scrapeMotionValuesFromProps","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","valueIsTransform","removeOnChange","on","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","renderedProps","isEnabled","FeatureConstructor","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","listener","nextValue","prevValue","existingValue","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getVariant","variants","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","vars","transformValues","transitionOrigin","getOrigin","newValues","newValueKeys","numNewValues","targetValue","checkTargetForNewValues","parsed","HTMLVisualElement","defaultType","default","computedStyle","isCSSVariableName","buildHTMLStyles","childSubscription","textContent","renderHTML","SVGVisualElement","isSVGTag","camelCaseAttributes","getAttribute","buildSVGAttrs","renderSVG","domMax","renderer","createDomVisualElement","Component","isSVGComponent","enableHardwareAcceleration"],"sourceRoot":""}